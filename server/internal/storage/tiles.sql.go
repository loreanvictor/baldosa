// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tiles.sql

package storage

import (
	"context"
)

const assignTile = `-- name: AssignTile :one
update tiles
set owner=?1
where id = ?2
returning id, x, y, owner, title, subtitle, image, link, created_at, updated_at
`

func (q *Queries) AssignTile(ctx context.Context, owner *string, iD int64) (Tile, error) {
	row := q.db.QueryRowContext(ctx, assignTile, owner, iD)
	var i Tile
	err := row.Scan(
		&i.ID,
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Image,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrphanTile = `-- name: CreateOrphanTile :one
insert into tiles(x, y, title, subtitle, image, link)
values (?1, ?2, ?3, ?4, ?5, ?6)
returning id, x, y, owner, title, subtitle, image, link, created_at, updated_at
`

type CreateOrphanTileParams struct {
	X        int64  `db:"x" json:"x"`
	Y        int64  `db:"y" json:"y"`
	Title    string `db:"title" json:"title"`
	Subtitle string `db:"subtitle" json:"subtitle"`
	Image    string `db:"image" json:"image"`
	Link     string `db:"link" json:"link"`
}

func (q *Queries) CreateOrphanTile(ctx context.Context, arg CreateOrphanTileParams) (Tile, error) {
	row := q.db.QueryRowContext(ctx, createOrphanTile,
		arg.X,
		arg.Y,
		arg.Title,
		arg.Subtitle,
		arg.Image,
		arg.Link,
	)
	var i Tile
	err := row.Scan(
		&i.ID,
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Image,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const editTile = `-- name: EditTile :one
update tiles
set title=?1,
    subtitle=?2,
    image=?3,
    link=?4,
    updated_at=current_timestamp
where id = ?5
returning id, x, y, owner, title, subtitle, image, link, created_at, updated_at
`

type EditTileParams struct {
	Title    string `db:"title" json:"title"`
	Subtitle string `db:"subtitle" json:"subtitle"`
	Image    string `db:"image" json:"image"`
	Link     string `db:"link" json:"link"`
	ID       int64  `db:"id" json:"id"`
}

func (q *Queries) EditTile(ctx context.Context, arg EditTileParams) (Tile, error) {
	row := q.db.QueryRowContext(ctx, editTile,
		arg.Title,
		arg.Subtitle,
		arg.Image,
		arg.Link,
		arg.ID,
	)
	var i Tile
	err := row.Scan(
		&i.ID,
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Image,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTileByID = `-- name: GetTileByID :one
select id, x, y, owner, title, subtitle, image, link, created_at, updated_at
from tiles
where id = ?1
`

func (q *Queries) GetTileByID(ctx context.Context, id int64) (Tile, error) {
	row := q.db.QueryRowContext(ctx, getTileByID, id)
	var i Tile
	err := row.Scan(
		&i.ID,
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Image,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTileRange = `-- name: GetTileRange :many
select id, x, y, owner, title, subtitle, image, link, created_at, updated_at
from tiles
where x >= ?1
  and x <= ?2
  and y >= ?3
  and y <= ?4
`

func (q *Queries) GetTileRange(ctx context.Context, x1 int64, x2 int64, y1 int64, y2 int64) ([]Tile, error) {
	rows, err := q.db.QueryContext(ctx, getTileRange,
		x1,
		x2,
		y1,
		y2,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tile{}
	for rows.Next() {
		var i Tile
		if err := rows.Scan(
			&i.ID,
			&i.X,
			&i.Y,
			&i.Owner,
			&i.Title,
			&i.Subtitle,
			&i.Image,
			&i.Link,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
