// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tiles.sql

package storage

import (
	"context"
)

const createTile = `-- name: CreateTile :one
insert into tiles(x, y, owner)
values ($1, $2, $3)
returning x, y, owner, title, subtitle, link, created_at, updated_at, expires_at
`

func (q *Queries) CreateTile(ctx context.Context, db DBTX, x int32, y int32, owner string) (Tile, error) {
	row := db.QueryRow(ctx, createTile, x, y, owner)
	var i Tile
	err := row.Scan(
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const editTileByOwner = `-- name: EditTileByOwner :one
update tiles
set title     = $1,
    subtitle  = $2,
    link      = $3,
    updated_at=now()
where x = $4
  and y = $5
  and owner = $6
returning x, y, owner, title, subtitle, link, created_at, updated_at, expires_at
`

type EditTileByOwnerParams struct {
	Title    string `db:"title" json:"title"`
	Subtitle string `db:"subtitle" json:"subtitle"`
	Link     string `db:"link" json:"link"`
	X        int32  `db:"x" json:"x"`
	Y        int32  `db:"y" json:"y"`
	Owner    string `db:"owner" json:"owner"`
}

func (q *Queries) EditTileByOwner(ctx context.Context, db DBTX, arg EditTileByOwnerParams) (Tile, error) {
	row := db.QueryRow(ctx, editTileByOwner,
		arg.Title,
		arg.Subtitle,
		arg.Link,
		arg.X,
		arg.Y,
		arg.Owner,
	)
	var i Tile
	err := row.Scan(
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getTile = `-- name: GetTile :one
select x, y, owner, title, subtitle, link, created_at, updated_at, expires_at
from tiles
where x = $1
  and y = $2
`

func (q *Queries) GetTile(ctx context.Context, db DBTX, x int32, y int32) (Tile, error) {
	row := db.QueryRow(ctx, getTile, x, y)
	var i Tile
	err := row.Scan(
		&i.X,
		&i.Y,
		&i.Owner,
		&i.Title,
		&i.Subtitle,
		&i.Link,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
