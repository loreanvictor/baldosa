// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package storage

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users(email, password)
values ($1, $2)
returning email, password, coins, created_at, updated_at
`

func (q *Queries) CreateUser(ctx context.Context, db DBTX, email string, password string) (User, error) {
	row := db.QueryRow(ctx, createUser, email, password)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Coins,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select email, password, coins, created_at, updated_at
from users
where email = $1
`

func (q *Queries) GetUser(ctx context.Context, db DBTX, email string) (User, error) {
	row := db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Coins,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const spendCoins = `-- name: SpendCoins :one
update users
set coins = coins - $1
where email = $2
returning email, password, coins, created_at, updated_at
`

func (q *Queries) SpendCoins(ctx context.Context, db DBTX, coins int32, email string) (User, error) {
	row := db.QueryRow(ctx, spendCoins, coins, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Password,
		&i.Coins,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
